# Write gaussian classifier, where training data follows Gaussian Distribution
import numpy as np
import matplotlib.pyplot as plt

def gaussian(x, mu, sig):
    return np.exp(-np.power(x - mu, 2.) / (2 * np.power(sig, 2.)))

x = [2.8, 2.9, 3, 3.1, 3.2, 3.3, 4.3, 4.5, 4.9, 5, 5.2, 5.8, 6]

# 1. create random data from normal distribution
r1=np.random.normal(3, 0.5, size=(20,1))
r2=np.random.normal(5, 0.5, size=(80,1))

# 2. calclulate it's mean and var 
mean_r1 = np.mean(r1)
var_r1  = np.var(r1)
print('r1 : ', mean_r1, var_r1)
mean_r2 = np.mean(r2)
var_r2  = np.var(r2)
print('r2 : ', mean_r2, var_r2)

# 3. define prob
p_r1 = np.float(np.size(r1))/(np.size(r1)+np.size(r2))
p_r2 = np.float(np.size(r2))/(np.size(r1)+np.size(r2))
print('p_r1 : ',p_r1,str(' | p_r2 : '), p_r2)
for i in x:
	prob_r1 = gaussian(i, mean_r1, np.sqrt(var_r1))*p_r1
	prob_r2 = gaussian(i, mean_r2, np.sqrt(var_r2))*p_r2
	print('x[i]:',i, '=> p1:', prob_r1, '| p2:', prob_r2)

# 4. visualise
fig, axs = plt.subplots(1,2)
axs[0].hist(r1, bins = 20)
axs[1].hist(r2, bins = 20)
plt.show()

# Run 1
# ('r1 : ', 3.0445183457284277, 0.25774567750376148)
# ('r2 : ', 4.940931285316962, 0.19525094183510366)
# ('p_r1 : ', 0.8, ' | p_r2 : ', 0.2)
# ('x[i]:', 2.8, '=> p1:', 0.71239092441573437, '| p2:', 1.5974219709358943e-06)
# ('x[i]:', 2.9, '=> p1:', 0.76823518205473051, '| p2:', 4.6612581538860412e-06)
# ('x[i]:', 3, '=> p1:', 0.79693018609459743, '| p2:', 1.2922417577079471e-05)
# ('x[i]:', 3.1, '=> p1:', 0.79523710099514267, '| p2:', 3.4036233748414881e-05)
# ('x[i]:', 3.2, '=> p1:', 0.76334921011945678, '| p2:', 8.5171900174779052e-05)
# ('x[i]:', 3.3, '=> p1:', 0.70485560668555314, '| p2:', 0.00020249219462152817)
# ('x[i]:', 4.3, '=> p1:', 0.037595342363664797, '| p2:', 0.069850410018076445)
# ('x[i]:', 4.5, '=> p1:', 0.013132399112571467, '| p2:', 0.12156440785845241)
# ('x[i]:', 4.9, '=> p1:', 0.0010059291258692341, '| p2:', 0.19914377809593198)
# ('x[i]:', 5, '=> p1:', 0.00048028485040137262, '| p2:', 0.19822097049818813)
# ('x[i]:', 5.2, '=> p1:', 9.7456926475412525e-05, '| p2:', 0.16841727890096414)
# ('x[i]:', 5.8, '=> p1:', 3.2089332494558338e-07, '| p2:', 0.030218192258840999)
# ('x[i]:', 6, '=> p1:', 3.5000870195619852e-08, '| p2:', 0.011314081976150664)

# Run 2
# ('r1 : ', 3.1284088486538293, 0.1286438705698528)
# ('r2 : ', 5.0011127465862923, 0.24094637133214247)
# ('p_r1 : ', 0.2, ' | p_r2 : ', 0.8)
# ('x[i]:', 2.8, '=> p1:', 0.13151588768750228, '| p2:', 3.4414416504390215e-05)
# ('x[i]:', 2.9, '=> p1:', 0.16329296855932895, '| p2:', 8.4036575761145784e-05)
# ('x[i]:', 3, '=> p1:', 0.18758465530853816, '| p2:', 0.00019686647108493706)
# ('x[i]:', 3.1, '=> p1:', 0.19937362098968955, '| p2:', 0.00044243618223952815)
# ('x[i]:', 3.2, '=> p1:', 0.19605532615202628, '| p2:', 0.00095390469654193372)
# ('x[i]:', 3.3, '=> p1:', 0.17837342659740169, '| p2:', 0.0019730350896280347)
# ('x[i]:', 4.3, '=> p1:', 0.00096399803252372014, '| p2:', 0.28845890009370173)
# ('x[i]:', 4.5, '=> p1:', 0.00013350947423523021, '| p2:', 0.47509386678449528)
# ('x[i]:', 4.9, '=> p1:', 1.007559498417749e-06, '| p2:', 0.78320606037745599)
# ('x[i]:', 5, '=> p1:', 2.4451852064086936e-07, '| p2:', 0.79999794443324845)
# ('x[i]:', 5.2, '=> p1:', 1.1405532350126025e-08, '| p2:', 0.73695496321080156)
# ('x[i]:', 5.8, '=> p1:', 1.7918450165171322e-13, '| p2:', 0.21276906584728122)
# ('x[i]:', 6, '=> p1:', 2.4096459178605488e-15, '| p2:', 0.10089464169468157)
